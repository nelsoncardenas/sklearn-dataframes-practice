"""Module to combine sklearn transformers."""
from typing import List, Optional, Tuple

import pandas as pd
from sklearn.compose import ColumnTransformer


class ColumnDataFrameTransformer(ColumnTransformer):
    """Applies transformers to DataFrames and returns a DataFrame with feature
    names. This estimator allows different columns or column subsets of the
    input to be transformed separately and the features generated by each
    transformer will be concatenated to form a single feature space. This is
    useful for DataFrame data, to combine several feature extraction mechanisms
     or transformations into a single transformer.
    .. versionadded:: 0.0.1"""

    def __init__(
        self,
        transformers: List[Tuple[str, ...]],
        remainder: str = "drop",
        n_jobs: Optional[int] = None,
        transformer_weights: Optional[dict] = None,
        verbose: bool = False,
        verbose_feature_names_out: bool = True,
    ):
        """Initializes the transformer.
        Args:
            - transformers (List[Tuple[str, ...]]): List of (name, transformer,
            columns) tuples specifying the transformer objects to be applied
            to subsets.
            - remainder (str, optional): {'drop', 'passthrough'} or estimator.
            Defaults to "drop".
            - n_jobs (int, optional): Number of jobs to run in parallel.
            Defaults to None.
            - transformer_weights (dict, optional): Multiplicative weights for
            features per transformer. Defaults to None.
            - verbose (bool, optional): If True, the time elapsed while
            fitting each transformer will be printed as it is completed.
            Defaults to False.
            - verbose_feature_names_out (bool, optional): If True,
            `get_feature_names_out` will prefix all feature names with the
            name of the transformer that generated that feature. Defaults to
            True.
        """
        super().__init__(
            transformers,
            remainder=remainder,
            n_jobs=n_jobs,
            transformer_weights=transformer_weights,
            verbose=verbose,
            verbose_feature_names_out=verbose_feature_names_out,
        )

    def transform(self, X: pd.DataFrame) -> pd.DataFrame:
        """Transforms X, concatenates results & returns a DataFrame with
        feature names.
        Args:
            - X (pd.DataFrame): The data to be transformed by subset.
        Returns:
            pd.DataFrame: Horizontally stacked results of transformers with
            names.
        """
        X_transformed = super().transform(X)
        return pd.DataFrame(
            X_transformed, columns=super().get_feature_names_out()
        )

    def fit_transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:
        """Fits, transforms, concatenates data & returns a DataFrame with
        feature names.
        Args:
            - X (pd.DataFrame): _description_
            - y (, optional): ignored. Defaults to None.
        Returns:
            pd.DataFrame: Horizontally stacked results of transformers with
            names.
        """
        X_transformed = super().fit_transform(X, y)
        return pd.DataFrame(
            X_transformed, columns=super().get_feature_names_out()
        )
